<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.lw.fx</groupId>
        <artifactId>dillonfx</artifactId>
        <version>1.0.0</version>
    </parent>
    <artifactId>dillonfx-client</artifactId>

    <properties>
        <app.launcher>com.lw.fx.client.Launcher</app.launcher>
        <build.platformModulesDir>${project.build.directory}${file.separator}platform-modules</build.platformModulesDir>
        <build.package.runtimeImageDir>${project.build.directory}${file.separator}runtime-image
        </build.package.runtimeImageDir>
        <build.artifactName>${app.name}-${app.version}-${platform}-${os.arch}</build.artifactName>
        <!-- application dependencies that will be included as JAR files -->
        <build.dependenciesDir>${project.build.directory}${file.separator}dependencies</build.dependenciesDir>
        <!-- application dependencies that will be bundled into runtime image -->
        <build.platformModulesDir>${project.build.directory}${file.separator}platform-modules</build.platformModulesDir>
        <!-- jpackage generated application image root -->
        <build.package.appImageDir>${project.build.directory}${file.separator}app-image</build.package.appImageDir>
        <!-- AppDir spec compliant dir for creating AppImage -->
        <build.package.appDir>${project.build.directory}${file.separator}app-dir</build.package.appDir>
        <!-- jlink generated runtime image -->
        <build.package.runtimeImageDir>${project.build.directory}${file.separator}runtime-image
        </build.package.runtimeImageDir>
        <!-- contains package scripts after filtering and placeholder replacement -->
        <build.package.scriptsDir>${project.build.directory}${file.separator}package-scripts</build.package.scriptsDir>
        <!-- jpackage directory for temp artifacts -->
        <build.package.tempDir>${project.build.directory}${file.separator}package-temp</build.package.tempDir>
        <!-- final artifacts (zip, deb, rpm...) -->
        <build.releaseDir>${project.build.directory}${file.separator}release</build.releaseDir>
        <ini4j-jar-name>ini4j.jar</ini4j-jar-name>
        <feign.version>12.4</feign.version>
        <datafx.version>8.0.2-SNAPSHOT</datafx.version>

    </properties>

    <dependencies>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-swing</artifactId>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-media</artifactId>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.kordamp.ikonli</groupId>
            <artifactId>ikonli-javafx</artifactId>
        </dependency>
        <dependency>
            <groupId>com.formdev</groupId>
            <artifactId>svgSalamander</artifactId>
            <version>1.1.3</version>
        </dependency>
        <dependency>
            <groupId>io.github.typhon0</groupId>
            <artifactId>AnimateFX</artifactId>
            <version>1.2.4</version>
        </dependency>
        <dependency>
            <groupId>org.kordamp.ikonli</groupId>
            <artifactId>ikonli-feather-pack</artifactId>
        </dependency>
        <dependency>
            <groupId>org.kordamp.ikonli</groupId>
            <artifactId>ikonli-material2-pack</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jetbrains</groupId>
            <artifactId>annotations</artifactId>
        </dependency>
        <dependency>
            <groupId>de.saxsys</groupId>
            <artifactId>mvvmfx</artifactId>
            <version>1.9.0-SNAPSHOT</version>
            <!--            <scope>system</scope>-->
            <!--            <systemPath>${pom.basedir}/libs/mvvmfx-1.9.0-SNAPSHOT.jar</systemPath>-->
        </dependency>
        <dependency>
            <groupId>de.saxsys</groupId>
            <artifactId>mvvmfx-validation</artifactId>
            <version>1.9.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
        </dependency>

        <dependency>
            <groupId>org.kordamp.jipsy</groupId>
            <artifactId>jipsy-processor</artifactId>
            <version>1.1.1</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.github.goxr3plus</groupId>
            <artifactId>FX-BorderlessScene</artifactId>
            <version>4.4.0</version>
            <scope>system</scope>
            <systemPath>${pom.basedir}/libs/FX-BorderlessScene-4.4.0.jar</systemPath>
        </dependency>
        <dependency>
            <groupId>fr.brouillard.oss</groupId>
            <artifactId>cssfx</artifactId>
        </dependency>
        <dependency>
            <groupId>net.datafaker</groupId>
            <artifactId>datafaker</artifactId>
        </dependency>
        <dependency>
            <groupId>org.controlsfx</groupId>
            <artifactId>controlsfx</artifactId>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
        </dependency>

        <dependency>
            <groupId>io.github.mkpaz</groupId>
            <artifactId>atlantafx-base</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.32</version> <!-- 适当的版本号 -->
        </dependency>
        <dependency>
            <groupId>io.github.openfeign</groupId>
            <artifactId>feign-core</artifactId>
            <version>${feign.version}</version>
        </dependency>
        <dependency>
            <groupId>io.github.openfeign</groupId>
            <artifactId>feign-slf4j</artifactId>
            <version>${feign.version}</version>
        </dependency>
        <dependency>
            <groupId>io.github.openfeign</groupId>
            <artifactId>feign-gson</artifactId>
            <version>${feign.version}</version>
        </dependency>

        <dependency>
            <groupId>io.github.openfeign</groupId>
            <artifactId>feign-okhttp</artifactId>
            <version>${feign.version}</version>
        </dependency>

        <dependency>
            <groupId>eu.hansolo</groupId>
            <artifactId>tilesfx</artifactId>
            <version>17.1.31</version>
            <exclusions>
                <exclusion>
                    <groupId>org.openjfx</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.26</version>
        </dependency>
        <dependency>
            <groupId>datafx-core</groupId>
            <artifactId>datafx-core</artifactId>
            <version>${datafx.version}</version>
            <scope>system</scope>
            <systemPath>${pom.basedir}/libs/datafx-core-8.0.2-SNAPSHOT.jar</systemPath>
        </dependency>
        <!-- 使用 Logback 作为实现 -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.2.12</version>
        </dependency>
    </dependencies>


    <build>
        <resources>
            <!-- filter resources -->
            <resource>
                <directory>src/main/resources</directory>
                <filtering>false</filtering>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>com/lw/fx/client/application.properties</include>
                </includes>
            </resource>
            <!-- copy pages for source code viewer  -->
            <resource>
                <directory>src/main/java/com/lw/fx/client/page</directory>
                <targetPath>com/lw/fx/client/page</targetPath>
                <filtering>false</filtering>
            </resource>
            <!-- copy icons -->
            <resource>
                <directory>icons</directory>
                <targetPath>com/lw/fx/client/assets</targetPath>
                <filtering>false</filtering>
            </resource>
            <resource>
                <directory>icons</directory>
                <filtering>false</filtering>
                <targetPath>${project.build.directory}</targetPath>
            </resource>
            <!-- copy and filter build scripts -->
            <resource>
                <directory>src/package-scripts</directory>
                <filtering>true</filtering>
                <targetPath>${build.package.scriptsDir}</targetPath>
            </resource>
        </resources>

        <plugins>
            <!-- compile SCSS -->
            <plugin>
                <groupId>us.hebi.sass</groupId>
                <artifactId>sass-cli-maven-plugin</artifactId>
                <configuration>
                    <args>
                        <arg>
                            ${project.basedir}/src/main/resources/com/lw/fx/client/assets/styles/scss/index.scss:${project.build.directory}/classes/com/lw/fx/client/assets/styles/index.css
                        </arg>
                        <arg>--no-source-map</arg>
                    </args>
                </configuration>
                <executions>
                    <execution>
                        <id>run-sass</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- check code style before compilation -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <executions>
                    <execution>
                        <id>validate</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <configuration>
                    <executable>${java.home}/bin/java</executable>
                    <mainClass>${app.launcher}</mainClass>
                </configuration>
                <executions>
                    <execution>
                        <id>run</id>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <!-- copy all dependencies that won't be included into runtime image -->
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${build.dependenciesDir}</outputDirectory>
                            <includeScope>runtime</includeScope>
                            <excludeGroupIds>org.openjfx</excludeGroupIds>
                        </configuration>
                    </execution>
                    <!-- copy platform dependencies that will be included into runtime image -->
                    <execution>
                        <id>copy-openjfx</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${build.platformModulesDir}</outputDirectory>
                            <includeGroupIds>org.openjfx</includeGroupIds>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <configuration>
                    <!-- skip installation to the local repository -->
                    <skip>true</skip>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <!-- copy application JAR file to the dependencies -->
                <configuration>
                    <outputDirectory>${build.dependenciesDir}</outputDirectory>
                </configuration>
            </plugin>
            <plugin>
                <groupId>io.github.wiverson</groupId>
                <artifactId>jtoolprovider-plugin</artifactId>
                <executions>
                    <!-- create custom JRE image -->
                    <execution>
                        <id>create-runtime-image</id>
                        <phase>package</phase>
                        <goals>
                            <goal>java-tool</goal>
                        </goals>
                        <configuration>
                            <toolName>jlink</toolName>
                            <addModules>
                                java.base,java.logging,jdk.localedata,jdk.zipfs,java.desktop,java.prefs,javafx.controls,javafx.fxml,javafx.swing,javafx.web
                            </addModules>
                            <modulePath>${build.platformModulesDir}</modulePath>
                            <output>${build.package.runtimeImageDir}</output>
                            <args>
                                <!-- additional options to shrink resulting image even more -->
                                <arg>--compress=2</arg>
                                <arg>--include-locales=en</arg>
                                <arg>--no-header-files</arg>
                                <arg>--no-man-pages</arg>
                                <arg>--strip-debug</arg>
                                <arg>--verbose</arg>
                            </args>
                        </configuration>
                    </execution>
                    <!-- create application image (includes JRE plus application JARs and resources) -->
                    <execution>
                        <id>create-app-image</id>
                        <phase>package</phase>
                        <goals>
                            <goal>java-tool</goal>
                        </goals>
                        <configuration>
                            <toolName>jpackage</toolName>
                            <removeDirectories>${build.package.tempDir}</removeDirectories>
                            <args>
                                <arg>@${build.package.scriptsDir}${file.separator}args-base.txt</arg>
                                <arg>@${build.package.scriptsDir}${file.separator}args-app-image.txt</arg>
                            </args>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- compress app image and place result to the release dir -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <executions>
                    <execution>
                        <id>assembly</id>
                        <phase>install</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${build.releaseDir}</outputDirectory>
                            <finalName>${build.artifactName}</finalName>
                            <attach>false</attach>
                            <appendAssemblyId>false</appendAssemblyId>
                            <tarLongFileMode>posix</tarLongFileMode>
                            <descriptors>
                                <descriptor>src/package-scripts/app-image.xml</descriptor>
                            </descriptors>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- skip module deployment -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>dev</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.openjfx</groupId>
                        <artifactId>javafx-maven-plugin</artifactId>
                        <configuration>
                            <options>
                                <option>-Datlantafx.mode=dev</option>
                            </options>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>linux-active</id>
            <activation>
                <os>
                    <family>unix</family>
                </os>
            </activation>
            <properties>
                <app.icon>${project.build.directory}/app-icon.png</app.icon>
                <app.build.compressionAlg>tar.gz</app.build.compressionAlg>
            </properties>
        </profile>
        <profile>
            <id>windows-active</id>
            <activation>
                <os>
                    <family>windows</family>
                </os>
            </activation>
            <properties>
                <app.icon>${project.build.directory}\app-icon.ico</app.icon>
                <app.build.compressionAlg>zip</app.build.compressionAlg>
            </properties>
        </profile>
    </profiles>
</project>